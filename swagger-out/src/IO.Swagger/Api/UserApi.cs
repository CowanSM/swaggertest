/* 
 * Test API Specification
 *
 * This is a test api for our upcoming project.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: nobodyshome@random.games
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IUserApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// End a Session
        /// </summary>
        /// <remarks>
        /// End an active session for an user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="sessionKey">Session Key from POST</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>ModelApiResponse</returns>
        ModelApiResponse DevelopersDeveloperKeyAppKeySessionsUuidDelete (string uuid, string developerKey, string sessionKey, string appKey);

        /// <summary>
        /// End a Session
        /// </summary>
        /// <remarks>
        /// End an active session for an user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="sessionKey">Session Key from POST</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>ApiResponse of ModelApiResponse</returns>
        ApiResponse<ModelApiResponse> DevelopersDeveloperKeyAppKeySessionsUuidDeleteWithHttpInfo (string uuid, string developerKey, string sessionKey, string appKey);
        /// <summary>
        /// Pause Or Resume Session
        /// </summary>
        /// <remarks>
        /// Pause or Resume a session without ending the session
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Has relevant session info for update.</param>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>ModelApiResponse</returns>
        ModelApiResponse DevelopersDeveloperKeyAppKeySessionsUuidPatch (SessionsUuidBody body, string uuid, string developerKey, string appKey);

        /// <summary>
        /// Pause Or Resume Session
        /// </summary>
        /// <remarks>
        /// Pause or Resume a session without ending the session
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Has relevant session info for update.</param>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>ApiResponse of ModelApiResponse</returns>
        ApiResponse<ModelApiResponse> DevelopersDeveloperKeyAppKeySessionsUuidPatchWithHttpInfo (SessionsUuidBody body, string uuid, string developerKey, string appKey);
        /// <summary>
        /// Start a Session
        /// </summary>
        /// <remarks>
        /// Start a Session for the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 DevelopersDeveloperKeyAppKeySessionsUuidPost (string uuid, string developerKey, string appKey);

        /// <summary>
        /// Start a Session
        /// </summary>
        /// <remarks>
        /// Start a Session for the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> DevelopersDeveloperKeyAppKeySessionsUuidPostWithHttpInfo (string uuid, string developerKey, string appKey);
        /// <summary>
        /// Keep-Alive a Session
        /// </summary>
        /// <remarks>
        /// Keep an active session for an user alive
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Has relevant session info for update.</param>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>ModelApiResponse</returns>
        ModelApiResponse DevelopersDeveloperKeyAppKeySessionsUuidPut (SessionInfo body, string uuid, string developerKey, string appKey);

        /// <summary>
        /// Keep-Alive a Session
        /// </summary>
        /// <remarks>
        /// Keep an active session for an user alive
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Has relevant session info for update.</param>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>ApiResponse of ModelApiResponse</returns>
        ApiResponse<ModelApiResponse> DevelopersDeveloperKeyAppKeySessionsUuidPutWithHttpInfo (SessionInfo body, string uuid, string developerKey, string appKey);
        /// <summary>
        /// Retrieve avatars for user
        /// </summary>
        /// <remarks>
        /// Retrieve all avatar info for the given user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>List&lt;Avatar&gt;</returns>
        List<Avatar> UserUuidAvatarsGet (string uuid);

        /// <summary>
        /// Retrieve avatars for user
        /// </summary>
        /// <remarks>
        /// Retrieve all avatar info for the given user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>ApiResponse of List&lt;Avatar&gt;</returns>
        ApiResponse<List<Avatar>> UserUuidAvatarsGetWithHttpInfo (string uuid);
        /// <summary>
        /// Retrieve user info
        /// </summary>
        /// <remarks>
        /// Retrieve explicit information for user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>User</returns>
        User UserUuidGet (string uuid);

        /// <summary>
        /// Retrieve user info
        /// </summary>
        /// <remarks>
        /// Retrieve explicit information for user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UserUuidGetWithHttpInfo (string uuid);
        /// <summary>
        /// Retrieve portals for user
        /// </summary>
        /// <remarks>
        /// Retrieve all portal info for the given user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>List&lt;Portal&gt;</returns>
        List<Portal> UserUuidPortalsGet (string uuid);

        /// <summary>
        /// Retrieve portals for user
        /// </summary>
        /// <remarks>
        /// Retrieve all portal info for the given user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>ApiResponse of List&lt;Portal&gt;</returns>
        ApiResponse<List<Portal>> UserUuidPortalsGetWithHttpInfo (string uuid);
        /// <summary>
        /// Retrieve ugts for user
        /// </summary>
        /// <remarks>
        /// Retrieve a list of ugts for the described user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> UserUuidUgtGet (string uuid);

        /// <summary>
        /// Retrieve ugts for user
        /// </summary>
        /// <remarks>
        /// Retrieve a list of ugts for the described user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> UserUuidUgtGetWithHttpInfo (string uuid);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// End a Session
        /// </summary>
        /// <remarks>
        /// End an active session for an user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="sessionKey">Session Key from POST</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>Task of ModelApiResponse</returns>
        System.Threading.Tasks.Task<ModelApiResponse> DevelopersDeveloperKeyAppKeySessionsUuidDeleteAsync (string uuid, string developerKey, string sessionKey, string appKey);

        /// <summary>
        /// End a Session
        /// </summary>
        /// <remarks>
        /// End an active session for an user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="sessionKey">Session Key from POST</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>Task of ApiResponse (ModelApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelApiResponse>> DevelopersDeveloperKeyAppKeySessionsUuidDeleteAsyncWithHttpInfo (string uuid, string developerKey, string sessionKey, string appKey);
        /// <summary>
        /// Pause Or Resume Session
        /// </summary>
        /// <remarks>
        /// Pause or Resume a session without ending the session
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Has relevant session info for update.</param>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>Task of ModelApiResponse</returns>
        System.Threading.Tasks.Task<ModelApiResponse> DevelopersDeveloperKeyAppKeySessionsUuidPatchAsync (SessionsUuidBody body, string uuid, string developerKey, string appKey);

        /// <summary>
        /// Pause Or Resume Session
        /// </summary>
        /// <remarks>
        /// Pause or Resume a session without ending the session
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Has relevant session info for update.</param>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>Task of ApiResponse (ModelApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelApiResponse>> DevelopersDeveloperKeyAppKeySessionsUuidPatchAsyncWithHttpInfo (SessionsUuidBody body, string uuid, string developerKey, string appKey);
        /// <summary>
        /// Start a Session
        /// </summary>
        /// <remarks>
        /// Start a Session for the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> DevelopersDeveloperKeyAppKeySessionsUuidPostAsync (string uuid, string developerKey, string appKey);

        /// <summary>
        /// Start a Session
        /// </summary>
        /// <remarks>
        /// Start a Session for the user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> DevelopersDeveloperKeyAppKeySessionsUuidPostAsyncWithHttpInfo (string uuid, string developerKey, string appKey);
        /// <summary>
        /// Keep-Alive a Session
        /// </summary>
        /// <remarks>
        /// Keep an active session for an user alive
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Has relevant session info for update.</param>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>Task of ModelApiResponse</returns>
        System.Threading.Tasks.Task<ModelApiResponse> DevelopersDeveloperKeyAppKeySessionsUuidPutAsync (SessionInfo body, string uuid, string developerKey, string appKey);

        /// <summary>
        /// Keep-Alive a Session
        /// </summary>
        /// <remarks>
        /// Keep an active session for an user alive
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Has relevant session info for update.</param>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>Task of ApiResponse (ModelApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelApiResponse>> DevelopersDeveloperKeyAppKeySessionsUuidPutAsyncWithHttpInfo (SessionInfo body, string uuid, string developerKey, string appKey);
        /// <summary>
        /// Retrieve avatars for user
        /// </summary>
        /// <remarks>
        /// Retrieve all avatar info for the given user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>Task of List&lt;Avatar&gt;</returns>
        System.Threading.Tasks.Task<List<Avatar>> UserUuidAvatarsGetAsync (string uuid);

        /// <summary>
        /// Retrieve avatars for user
        /// </summary>
        /// <remarks>
        /// Retrieve all avatar info for the given user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>Task of ApiResponse (List&lt;Avatar&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Avatar>>> UserUuidAvatarsGetAsyncWithHttpInfo (string uuid);
        /// <summary>
        /// Retrieve user info
        /// </summary>
        /// <remarks>
        /// Retrieve explicit information for user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UserUuidGetAsync (string uuid);

        /// <summary>
        /// Retrieve user info
        /// </summary>
        /// <remarks>
        /// Retrieve explicit information for user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UserUuidGetAsyncWithHttpInfo (string uuid);
        /// <summary>
        /// Retrieve portals for user
        /// </summary>
        /// <remarks>
        /// Retrieve all portal info for the given user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>Task of List&lt;Portal&gt;</returns>
        System.Threading.Tasks.Task<List<Portal>> UserUuidPortalsGetAsync (string uuid);

        /// <summary>
        /// Retrieve portals for user
        /// </summary>
        /// <remarks>
        /// Retrieve all portal info for the given user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>Task of ApiResponse (List&lt;Portal&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Portal>>> UserUuidPortalsGetAsyncWithHttpInfo (string uuid);
        /// <summary>
        /// Retrieve ugts for user
        /// </summary>
        /// <remarks>
        /// Retrieve a list of ugts for the described user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> UserUuidUgtGetAsync (string uuid);

        /// <summary>
        /// Retrieve ugts for user
        /// </summary>
        /// <remarks>
        /// Retrieve a list of ugts for the described user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> UserUuidUgtGetAsyncWithHttpInfo (string uuid);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class UserApi : IUserApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// </summary>
        /// <returns></returns>
        public UserApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// End a Session End an active session for an user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="sessionKey">Session Key from POST</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>ModelApiResponse</returns>
        public ModelApiResponse DevelopersDeveloperKeyAppKeySessionsUuidDelete (string uuid, string developerKey, string sessionKey, string appKey)
        {
             ApiResponse<ModelApiResponse> localVarResponse = DevelopersDeveloperKeyAppKeySessionsUuidDeleteWithHttpInfo(uuid, developerKey, sessionKey, appKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// End a Session End an active session for an user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="sessionKey">Session Key from POST</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>ApiResponse of ModelApiResponse</returns>
        public ApiResponse< ModelApiResponse > DevelopersDeveloperKeyAppKeySessionsUuidDeleteWithHttpInfo (string uuid, string developerKey, string sessionKey, string appKey)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidDelete");
            // verify the required parameter 'developerKey' is set
            if (developerKey == null)
                throw new ApiException(400, "Missing required parameter 'developerKey' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidDelete");
            // verify the required parameter 'sessionKey' is set
            if (sessionKey == null)
                throw new ApiException(400, "Missing required parameter 'sessionKey' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidDelete");
            // verify the required parameter 'appKey' is set
            if (appKey == null)
                throw new ApiException(400, "Missing required parameter 'appKey' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidDelete");

            var localVarPath = "/developers/{developerKey}/{appKey}/sessions/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (developerKey != null) localVarPathParams.Add("developerKey", this.Configuration.ApiClient.ParameterToString(developerKey)); // path parameter
            if (appKey != null) localVarPathParams.Add("appKey", this.Configuration.ApiClient.ParameterToString(appKey)); // path parameter
            if (sessionKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sessionKey", sessionKey)); // query parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevelopersDeveloperKeyAppKeySessionsUuidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelApiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelApiResponse)));
        }

        /// <summary>
        /// End a Session End an active session for an user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="sessionKey">Session Key from POST</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>Task of ModelApiResponse</returns>
        public async System.Threading.Tasks.Task<ModelApiResponse> DevelopersDeveloperKeyAppKeySessionsUuidDeleteAsync (string uuid, string developerKey, string sessionKey, string appKey)
        {
             ApiResponse<ModelApiResponse> localVarResponse = await DevelopersDeveloperKeyAppKeySessionsUuidDeleteAsyncWithHttpInfo(uuid, developerKey, sessionKey, appKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// End a Session End an active session for an user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="sessionKey">Session Key from POST</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>Task of ApiResponse (ModelApiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelApiResponse>> DevelopersDeveloperKeyAppKeySessionsUuidDeleteAsyncWithHttpInfo (string uuid, string developerKey, string sessionKey, string appKey)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidDelete");
            // verify the required parameter 'developerKey' is set
            if (developerKey == null)
                throw new ApiException(400, "Missing required parameter 'developerKey' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidDelete");
            // verify the required parameter 'sessionKey' is set
            if (sessionKey == null)
                throw new ApiException(400, "Missing required parameter 'sessionKey' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidDelete");
            // verify the required parameter 'appKey' is set
            if (appKey == null)
                throw new ApiException(400, "Missing required parameter 'appKey' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidDelete");

            var localVarPath = "/developers/{developerKey}/{appKey}/sessions/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (developerKey != null) localVarPathParams.Add("developerKey", this.Configuration.ApiClient.ParameterToString(developerKey)); // path parameter
            if (appKey != null) localVarPathParams.Add("appKey", this.Configuration.ApiClient.ParameterToString(appKey)); // path parameter
            if (sessionKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sessionKey", sessionKey)); // query parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevelopersDeveloperKeyAppKeySessionsUuidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelApiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelApiResponse)));
        }

        /// <summary>
        /// Pause Or Resume Session Pause or Resume a session without ending the session
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Has relevant session info for update.</param>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>ModelApiResponse</returns>
        public ModelApiResponse DevelopersDeveloperKeyAppKeySessionsUuidPatch (SessionsUuidBody body, string uuid, string developerKey, string appKey)
        {
             ApiResponse<ModelApiResponse> localVarResponse = DevelopersDeveloperKeyAppKeySessionsUuidPatchWithHttpInfo(body, uuid, developerKey, appKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pause Or Resume Session Pause or Resume a session without ending the session
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Has relevant session info for update.</param>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>ApiResponse of ModelApiResponse</returns>
        public ApiResponse< ModelApiResponse > DevelopersDeveloperKeyAppKeySessionsUuidPatchWithHttpInfo (SessionsUuidBody body, string uuid, string developerKey, string appKey)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidPatch");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidPatch");
            // verify the required parameter 'developerKey' is set
            if (developerKey == null)
                throw new ApiException(400, "Missing required parameter 'developerKey' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidPatch");
            // verify the required parameter 'appKey' is set
            if (appKey == null)
                throw new ApiException(400, "Missing required parameter 'appKey' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidPatch");

            var localVarPath = "/developers/{developerKey}/{appKey}/sessions/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (developerKey != null) localVarPathParams.Add("developerKey", this.Configuration.ApiClient.ParameterToString(developerKey)); // path parameter
            if (appKey != null) localVarPathParams.Add("appKey", this.Configuration.ApiClient.ParameterToString(appKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevelopersDeveloperKeyAppKeySessionsUuidPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelApiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelApiResponse)));
        }

        /// <summary>
        /// Pause Or Resume Session Pause or Resume a session without ending the session
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Has relevant session info for update.</param>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>Task of ModelApiResponse</returns>
        public async System.Threading.Tasks.Task<ModelApiResponse> DevelopersDeveloperKeyAppKeySessionsUuidPatchAsync (SessionsUuidBody body, string uuid, string developerKey, string appKey)
        {
             ApiResponse<ModelApiResponse> localVarResponse = await DevelopersDeveloperKeyAppKeySessionsUuidPatchAsyncWithHttpInfo(body, uuid, developerKey, appKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pause Or Resume Session Pause or Resume a session without ending the session
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Has relevant session info for update.</param>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>Task of ApiResponse (ModelApiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelApiResponse>> DevelopersDeveloperKeyAppKeySessionsUuidPatchAsyncWithHttpInfo (SessionsUuidBody body, string uuid, string developerKey, string appKey)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidPatch");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidPatch");
            // verify the required parameter 'developerKey' is set
            if (developerKey == null)
                throw new ApiException(400, "Missing required parameter 'developerKey' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidPatch");
            // verify the required parameter 'appKey' is set
            if (appKey == null)
                throw new ApiException(400, "Missing required parameter 'appKey' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidPatch");

            var localVarPath = "/developers/{developerKey}/{appKey}/sessions/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (developerKey != null) localVarPathParams.Add("developerKey", this.Configuration.ApiClient.ParameterToString(developerKey)); // path parameter
            if (appKey != null) localVarPathParams.Add("appKey", this.Configuration.ApiClient.ParameterToString(appKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevelopersDeveloperKeyAppKeySessionsUuidPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelApiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelApiResponse)));
        }

        /// <summary>
        /// Start a Session Start a Session for the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 DevelopersDeveloperKeyAppKeySessionsUuidPost (string uuid, string developerKey, string appKey)
        {
             ApiResponse<InlineResponse200> localVarResponse = DevelopersDeveloperKeyAppKeySessionsUuidPostWithHttpInfo(uuid, developerKey, appKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start a Session Start a Session for the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > DevelopersDeveloperKeyAppKeySessionsUuidPostWithHttpInfo (string uuid, string developerKey, string appKey)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidPost");
            // verify the required parameter 'developerKey' is set
            if (developerKey == null)
                throw new ApiException(400, "Missing required parameter 'developerKey' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidPost");
            // verify the required parameter 'appKey' is set
            if (appKey == null)
                throw new ApiException(400, "Missing required parameter 'appKey' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidPost");

            var localVarPath = "/developers/{developerKey}/{appKey}/sessions/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (developerKey != null) localVarPathParams.Add("developerKey", this.Configuration.ApiClient.ParameterToString(developerKey)); // path parameter
            if (appKey != null) localVarPathParams.Add("appKey", this.Configuration.ApiClient.ParameterToString(appKey)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevelopersDeveloperKeyAppKeySessionsUuidPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Start a Session Start a Session for the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> DevelopersDeveloperKeyAppKeySessionsUuidPostAsync (string uuid, string developerKey, string appKey)
        {
             ApiResponse<InlineResponse200> localVarResponse = await DevelopersDeveloperKeyAppKeySessionsUuidPostAsyncWithHttpInfo(uuid, developerKey, appKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start a Session Start a Session for the user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> DevelopersDeveloperKeyAppKeySessionsUuidPostAsyncWithHttpInfo (string uuid, string developerKey, string appKey)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidPost");
            // verify the required parameter 'developerKey' is set
            if (developerKey == null)
                throw new ApiException(400, "Missing required parameter 'developerKey' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidPost");
            // verify the required parameter 'appKey' is set
            if (appKey == null)
                throw new ApiException(400, "Missing required parameter 'appKey' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidPost");

            var localVarPath = "/developers/{developerKey}/{appKey}/sessions/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (developerKey != null) localVarPathParams.Add("developerKey", this.Configuration.ApiClient.ParameterToString(developerKey)); // path parameter
            if (appKey != null) localVarPathParams.Add("appKey", this.Configuration.ApiClient.ParameterToString(appKey)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevelopersDeveloperKeyAppKeySessionsUuidPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Keep-Alive a Session Keep an active session for an user alive
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Has relevant session info for update.</param>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>ModelApiResponse</returns>
        public ModelApiResponse DevelopersDeveloperKeyAppKeySessionsUuidPut (SessionInfo body, string uuid, string developerKey, string appKey)
        {
             ApiResponse<ModelApiResponse> localVarResponse = DevelopersDeveloperKeyAppKeySessionsUuidPutWithHttpInfo(body, uuid, developerKey, appKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Keep-Alive a Session Keep an active session for an user alive
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Has relevant session info for update.</param>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>ApiResponse of ModelApiResponse</returns>
        public ApiResponse< ModelApiResponse > DevelopersDeveloperKeyAppKeySessionsUuidPutWithHttpInfo (SessionInfo body, string uuid, string developerKey, string appKey)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidPut");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidPut");
            // verify the required parameter 'developerKey' is set
            if (developerKey == null)
                throw new ApiException(400, "Missing required parameter 'developerKey' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidPut");
            // verify the required parameter 'appKey' is set
            if (appKey == null)
                throw new ApiException(400, "Missing required parameter 'appKey' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidPut");

            var localVarPath = "/developers/{developerKey}/{appKey}/sessions/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (developerKey != null) localVarPathParams.Add("developerKey", this.Configuration.ApiClient.ParameterToString(developerKey)); // path parameter
            if (appKey != null) localVarPathParams.Add("appKey", this.Configuration.ApiClient.ParameterToString(appKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevelopersDeveloperKeyAppKeySessionsUuidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelApiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelApiResponse)));
        }

        /// <summary>
        /// Keep-Alive a Session Keep an active session for an user alive
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Has relevant session info for update.</param>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>Task of ModelApiResponse</returns>
        public async System.Threading.Tasks.Task<ModelApiResponse> DevelopersDeveloperKeyAppKeySessionsUuidPutAsync (SessionInfo body, string uuid, string developerKey, string appKey)
        {
             ApiResponse<ModelApiResponse> localVarResponse = await DevelopersDeveloperKeyAppKeySessionsUuidPutAsyncWithHttpInfo(body, uuid, developerKey, appKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Keep-Alive a Session Keep an active session for an user alive
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Has relevant session info for update.</param>
        /// <param name="uuid">User Unique Id</param>
        /// <param name="developerKey">Developer Api Key</param>
        /// <param name="appKey">App Api Key</param>
        /// <returns>Task of ApiResponse (ModelApiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelApiResponse>> DevelopersDeveloperKeyAppKeySessionsUuidPutAsyncWithHttpInfo (SessionInfo body, string uuid, string developerKey, string appKey)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidPut");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidPut");
            // verify the required parameter 'developerKey' is set
            if (developerKey == null)
                throw new ApiException(400, "Missing required parameter 'developerKey' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidPut");
            // verify the required parameter 'appKey' is set
            if (appKey == null)
                throw new ApiException(400, "Missing required parameter 'appKey' when calling UserApi->DevelopersDeveloperKeyAppKeySessionsUuidPut");

            var localVarPath = "/developers/{developerKey}/{appKey}/sessions/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (developerKey != null) localVarPathParams.Add("developerKey", this.Configuration.ApiClient.ParameterToString(developerKey)); // path parameter
            if (appKey != null) localVarPathParams.Add("appKey", this.Configuration.ApiClient.ParameterToString(appKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevelopersDeveloperKeyAppKeySessionsUuidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelApiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelApiResponse)));
        }

        /// <summary>
        /// Retrieve avatars for user Retrieve all avatar info for the given user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>List&lt;Avatar&gt;</returns>
        public List<Avatar> UserUuidAvatarsGet (string uuid)
        {
             ApiResponse<List<Avatar>> localVarResponse = UserUuidAvatarsGetWithHttpInfo(uuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve avatars for user Retrieve all avatar info for the given user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>ApiResponse of List&lt;Avatar&gt;</returns>
        public ApiResponse< List<Avatar> > UserUuidAvatarsGetWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling UserApi->UserUuidAvatarsGet");

            var localVarPath = "/user/{uuid}/avatars";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserUuidAvatarsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Avatar>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Avatar>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Avatar>)));
        }

        /// <summary>
        /// Retrieve avatars for user Retrieve all avatar info for the given user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>Task of List&lt;Avatar&gt;</returns>
        public async System.Threading.Tasks.Task<List<Avatar>> UserUuidAvatarsGetAsync (string uuid)
        {
             ApiResponse<List<Avatar>> localVarResponse = await UserUuidAvatarsGetAsyncWithHttpInfo(uuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve avatars for user Retrieve all avatar info for the given user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>Task of ApiResponse (List&lt;Avatar&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Avatar>>> UserUuidAvatarsGetAsyncWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling UserApi->UserUuidAvatarsGet");

            var localVarPath = "/user/{uuid}/avatars";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserUuidAvatarsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Avatar>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Avatar>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Avatar>)));
        }

        /// <summary>
        /// Retrieve user info Retrieve explicit information for user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>User</returns>
        public User UserUuidGet (string uuid)
        {
             ApiResponse<User> localVarResponse = UserUuidGetWithHttpInfo(uuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve user info Retrieve explicit information for user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > UserUuidGetWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling UserApi->UserUuidGet");

            var localVarPath = "/user/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserUuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Retrieve user info Retrieve explicit information for user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UserUuidGetAsync (string uuid)
        {
             ApiResponse<User> localVarResponse = await UserUuidGetAsyncWithHttpInfo(uuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve user info Retrieve explicit information for user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> UserUuidGetAsyncWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling UserApi->UserUuidGet");

            var localVarPath = "/user/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserUuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Retrieve portals for user Retrieve all portal info for the given user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>List&lt;Portal&gt;</returns>
        public List<Portal> UserUuidPortalsGet (string uuid)
        {
             ApiResponse<List<Portal>> localVarResponse = UserUuidPortalsGetWithHttpInfo(uuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve portals for user Retrieve all portal info for the given user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>ApiResponse of List&lt;Portal&gt;</returns>
        public ApiResponse< List<Portal> > UserUuidPortalsGetWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling UserApi->UserUuidPortalsGet");

            var localVarPath = "/user/{uuid}/portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserUuidPortalsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Portal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Portal>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Portal>)));
        }

        /// <summary>
        /// Retrieve portals for user Retrieve all portal info for the given user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>Task of List&lt;Portal&gt;</returns>
        public async System.Threading.Tasks.Task<List<Portal>> UserUuidPortalsGetAsync (string uuid)
        {
             ApiResponse<List<Portal>> localVarResponse = await UserUuidPortalsGetAsyncWithHttpInfo(uuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve portals for user Retrieve all portal info for the given user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>Task of ApiResponse (List&lt;Portal&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Portal>>> UserUuidPortalsGetAsyncWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling UserApi->UserUuidPortalsGet");

            var localVarPath = "/user/{uuid}/portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserUuidPortalsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Portal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Portal>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Portal>)));
        }

        /// <summary>
        /// Retrieve ugts for user Retrieve a list of ugts for the described user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> UserUuidUgtGet (string uuid)
        {
             ApiResponse<List<User>> localVarResponse = UserUuidUgtGetWithHttpInfo(uuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve ugts for user Retrieve a list of ugts for the described user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public ApiResponse< List<User> > UserUuidUgtGetWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling UserApi->UserUuidUgtGet");

            var localVarPath = "/user/{uuid}/ugt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserUuidUgtGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<User>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// Retrieve ugts for user Retrieve a list of ugts for the described user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> UserUuidUgtGetAsync (string uuid)
        {
             ApiResponse<List<User>> localVarResponse = await UserUuidUgtGetAsyncWithHttpInfo(uuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve ugts for user Retrieve a list of ugts for the described user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">Unique User Id</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<User>>> UserUuidUgtGetAsyncWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling UserApi->UserUuidUgtGet");

            var localVarPath = "/user/{uuid}/ugt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserUuidUgtGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<User>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

    }
}
